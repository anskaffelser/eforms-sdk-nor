#!/usr/bin/env ruby

require 'bundler/setup'
require 'json'
require 'slop'
require 'yaml'
require 'deep_merge'

opts = Slop.parse do |o|
  o.string '-c', '--config-file', default: 'src/fields/eu.yaml'
  o.string '-i', '--input-file', default: 'target/eforms-sdk/fields/fields.json'
  o.string '-o', '--output-file', default: 'target/eforms-sdk-nor/fields/eu.json'
end

# Loading configuration
config = YAML.load_file opts[:config_file]

# Loading source
source = JSON.parse File.read opts[:input_file]
groups = source['xmlStructure'].to_h {|o| [o['id'], o]}
fields = source['fields'].to_h {|o| [o['id'], o]}
all = Hash::new.merge(groups).merge(fields)


# Remove references to notice types not used
if config.has_key? 'noticeTypes'
  noticeTypes = config['noticeTypes'].map { |v| v.to_s }

  fields.each do |i, field|
    ['forbidden', 'mandatory'].each do |kind|
      constraints = field.fetch(kind, {}).fetch('constraints', [])
      constraints.filter { |c| c.has_key? 'noticeTypes' }.each do |constraint|
        constraint['noticeTypes'] = constraint['noticeTypes'].filter { |nt| noticeTypes.include? nt }
        constraints.delete(constraint) if constraint['noticeTypes'].size == 0
      end

      field.delete(kind) if constraints.size == 0
    end
  end
end

# Updating fields
config.fetch('fields', {}).each do |id, field|
  if !fields.has_key? id
    fields[id] = {
      'id' => id,
    }
    all[id] = fields[id]
    source['fields'].append(fields[id])
  end
  fields[id].deep_merge!(field)
end

# Include rules
config.fetch('rules', {}).each do |field, rules|
  rules.each do |rule|
    all[field]['schematron'] = all[field].fetch('schematron', []).append({
      'id' => rule['id'],
      'context' => rule.fetch('context', all[field]['xpathAbsolute']),
      'test' => rule['test'],
      'message' => rule['message'],
    })
  end
end

# Rules: Make sure both Norwegian and English is provided
if config.has_key? 'languages'
  counter = 0
  fields.each do |i, field|
    if field['type'] == 'text-multilingual'
      field['schematron'] = field.fetch('schematron', []).append({
        'id' => "EFORMS-NOR-T%03d" % counter += 1,
        'context' => "#{field['xpathAbsolute'][..0-field['xpathRelative'].length-2]}",
        'test' => "not(#{field['xpathRelative']}) or (#{field['xpathRelative']}[@languageID = ('ENG')] and #{field['xpathRelative']}[@languageID = ('NOR', 'NNO', 'NOB')])",
        'message' => config['languages']['message'],
      })
    end
  end
end

# Write result
File.write opts[:output_file], JSON.pretty_generate(source, array_nl: '')
  .gsub(/\[\s+/, "[ ")
  .gsub(/\}\s+/, "} ")
  .gsub(/\",[ ]+\"/, '", "')
  .gsub(/\"\s+\]+/, '"]')